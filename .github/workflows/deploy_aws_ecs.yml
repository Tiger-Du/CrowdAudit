name: Deploy to Amazon ECS

on: [workflow_dispatch]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_PRIVATE_REGISTRY: ${{ secrets.ECR_PRIVATE_REGISTRY }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REGISTRY_ALIAS: ${{ secrets.ECR_REGISTRY_ALIAS }} # For ECR Public Registries
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_TASK_DEFINITION: .aws/task-definition.json
  ECS_TASK_DEFINITION_FAMILY: ${{ secrets.ECS_TASK_DEFINITION_FAMILY }}
  ECS_TASK_DEFINITION_ARN: ${{ secrets.ECS_TASK_DEFINITION_ARN }}
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
  IMAGE_TAG: ${{ github.sha }}
  
jobs:
  push:
    name: Push
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }} # For ECR Private Registries
          # aws-region: us-east-1 # Required for ECR Public Registries

      # Private ECR Repository
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image to Amazon ECR
        id: build-image
        # env:
        #   IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t ${{ env.ECR_PRIVATE_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push ${{ env.ECR_PRIVATE_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          # echo "image=${{ env.ECR_PRIVATE_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

      # Public ECR Repository
      # - name: Login to Amazon ECR Public
      #   id: login-ecr-public
      #   uses: aws-actions/amazon-ecr-login@v2
      #   with:
      #     registry-type: public

      # - name: Build, tag, and push Docker image to Amazon ECR Public
      #   id: build-image-public        
      #   run: |
      #     docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REGISTRY_ALIAS }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
      #     docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REGISTRY_ALIAS }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
      #     # echo "image=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    needs: push

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }} # For ECR Private Registries

      - name: Download task definition with AWS CLI
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION_FAMILY }} --query taskDefinition > task-definition.json
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          # task-definition: ${{ env.ECS_TASK_DEFINITION }}
          # task-definition-arn: ${{ env.ECS_TASK_DEFINITION_ARN }}
          # task-definition-family: ${{ env.ECS_TASK_DEFINITION_FAMILY }}
          container-name: ${{ env.CONTAINER_NAME }}
          # image: ${{ steps.build-image.outputs.image }}
          # image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          # image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REGISTRY_ALIAS }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} # Alias for Public Repositories
          image: ${{ env.ECR_PRIVATE_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} # Private Registries
          
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
